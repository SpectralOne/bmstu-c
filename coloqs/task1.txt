
  // Quadratic equation //

#include <stdio.h>
#include <math.h>
#define OK               0
#define INPUT_ERROR     -1
#define CLASSIC         -2 //  ax^2 + bx + c = 0
#define MISSING_A       -3 //  bx = -c        : x = -c/b
#define MISSING_A_B     -4 //  c = 0 ---
#define MISSING_A_C     -5 //  bx = 0         : x = 0
#define MISSING_B       -6 //  ax^2 = -c      : x = sqrt(-c/a)
#define MISSING_B_C     -7 //  ax^2 = 0       : x = 0
#define MISSING_ALL     -8 //  ? = 0
#define COMPLEX_CLASSIC -9
#define COMPLEX_MISSING -10
#define UNSOLVABLE      -11
#define PRECISION        0.0000000000001

int f_equal(double num1, double num2)
{
    return (fabs(num1 - num2) < PRECISION);
}

int equation_type(int a, int b, int c)
{
    int equation_type = MISSING_ALL;

    if (a && b && c)
        equation_type = CLASSIC;
    if (!a && b && c)
        equation_type = MISSING_A;
    if (!a && !b && c)
        equation_type = MISSING_A_B;
    if (!a && b && !c)
        equation_type = MISSING_A_C;
    if (a && !b && c)
        equation_type = MISSING_B;
    if (a && !b && !c)
        equation_type = MISSING_B_C;

    return equation_type;
}

int root_finder(double a, double b, double c, int equation_type, int *roots_count, double *root1, double *root2)
{
    int status = MISSING_ALL;

    if (equation_type == CLASSIC)
    {
        double D = (b * b) - (4 * a * c);
        if (f_equal(D, 0))
        {
            status = OK;
            *root1 = -b / (2 * a);
            *roots_count = 1;
        }
        else if (D > 0)
        {
            status = OK;
            *root1 = (-b + sqrt(D)) / (2 * a);
            *root2 = (-b - sqrt(D)) / (2 * a);
            *roots_count = 2;
        }
        else
        {
            status = COMPLEX_CLASSIC;
            *root1 = -b / (2 * a);
            *root2 = *root1;
        }
    }
    if (equation_type == MISSING_A)
    {
        status = OK;
        *root1 = -c/b;
        *roots_count = 1;
    }
    if (equation_type == MISSING_A_B)
        status = UNSOLVABLE;
    if (equation_type == MISSING_A_C)
    {
        status = OK;
        *root1 = 0;
        *roots_count = 1;
    }
    if (equation_type == MISSING_B)
    {
        if ((c > 0 && a > 0) || (a < 0 && c > 0) || (a < 0 && c < 0))
            status = COMPLEX_MISSING;
        else
        {
            status = OK;
            *root1 = sqrt(-c / a);
            *root2 = -(sqrt(-c / a));
            *roots_count = 2;
        }
    }
    if (equation_type == MISSING_B_C)
    {
        status = OK;
        *root1 = 0;
        *roots_count = 1;
    }
    return status;
}

int main(void)
{
    int a, b, c, eq_type, roots_count = 0, status = OK;
    double root1, root2;

    printf("Enter coefficients: ");
    if (scanf("%d%d%d", &a, &b, &c) == 3)
    {
        eq_type = equation_type(a, b, c);
        status = root_finder(a, b, c, eq_type, &roots_count, &root1, &root2);
        if (status == OK)
        {
            if (roots_count == 2)
                printf("Roots are %.6f and %.6f", root1, root2);
            else
                printf("Only one root has been found: %.6f", root1);
        }
        else if (status == COMPLEX_CLASSIC)
        {
            double D = fabs((b * b) - (4 * a * c));
            printf("Complex solution:\n");
            printf("%.6f + i%.6f\n%.6f - i%.6f", root1, sqrt(D), root2, sqrt(D));
        }
        else if (status == COMPLEX_MISSING)
        {
            printf("Complex solution:\n");
            printf(" i%f\n-i%f", sqrt(fabs(-c / a)), sqrt(fabs(-c / a)));
        }
        else
            printf("Cant solve!");
    }
    else
    {
        status = INPUT_ERROR;
        printf("Input error!");
    }
    return status;
}